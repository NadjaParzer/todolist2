{"version":3,"sources":["api/todolist-api.ts","reportWebVitals.ts","utils/errorUtils/handleServerNetworkError.ts","app/app-reducer.ts","utils/errorUtils/handleServerAppError.ts","components/Todolists/tasks-reducer.ts","components/Todolists/todolists-reducer.ts","components/Login/auth-reducer.ts","app/store.ts","components/common/AddItemForm.tsx","components/common/Editablespan.tsx","components/Todolists/Todolist/Tasks/Task.tsx","components/Todolists/Todolist/Todolist.tsx","components/Todolists/TodoLists.tsx","components/common/ErrorSnackBar.tsx","components/Login/Login.tsx","app/AppWithRedux.tsx","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","authAPI","data","post","delete","get","todolistAPI","todolistId","title","put","taskId","model","handleServerNetworkError","message","dispatch","setAppErrorAC","setAppStatusAC","initialState","status","error","initialized","type","handleServerAppError","messages","length","changeTaskEntityStatus","entityStatus","id","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","completed","description","priority","startDate","deadline","res","resultCode","updateTaskAC","catch","console","warn","fetchTodolistsTC","todolists","todos","forEach","todo","setTasksAC","items","v1","isLoggedIn","setIsLoggedInAC","value","rootReducer","combineReducers","state","action","map","tl","filter","todolist","stateCopy","todoListId","app","auth","store","createStore","applyMiddleware","thunk","window","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","TextField","variant","label","onChange","e","currentTarget","helperText","onKeyPress","charCode","IconButton","color","AddBox","onClick","trim","Editablespan","props","editMode","setEditMode","onBlur","autoFocus","onDoubleClick","Task","ListItem","className","Checkbox","checked","changeTaskStatus","changeTaskTitle","removeTask","Delete","Todolist","demo","useDispatch","useSelector","useCallback","removeTaskAC","removeTaskTC","onChangeHandler","onChangeTitle","addTask","item","addTaskAC","addTaskTC","onAllClickHandle","changeFilter","onActiveClickHandle","onCompletedClickHandle","changeTodolistTitle","tasksForTodolist","removeTodolist","List","todolistID","Button","TodoLists","useEffect","changeTodolistEntityStatus","removeTodolistAC","newTitle","changeTodolistTitleAC","addTodolist","addTodolistTC","Grid","style","padding","container","spacing","Paper","to","Alert","ref","elevation","ErrorSnackBar","isOpen","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","onClose","severity","sx","width","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","FormControlLabel","control","AppWithRedux","isInitialized","logoutHandler","AppBar","position","Toolbar","edge","Menu","Typography","LinearProgress","Container","path","element","CircularProgress","top","left","height","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.984c218f.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport type TodolistType = {\r\n  id: string\r\n  title: string\r\n  addedDate: string\r\n  order: number\r\n}\r\nexport type ResponseType<Data={}> = {\r\n  resultCode: number\r\n  messages: Array<string>\r\n  fieldsErrors: Array<string>\r\n  data: Data\r\n}\r\nexport enum TaskStatuses {\r\n  New = 0,\r\n  InProgress = 1,\r\n  Completed = 2,\r\n  Draft =3\r\n}\r\nexport enum TaskPriorities {\r\n  Low = 0,\r\n  Middle = 1,\r\n  High = 2,\r\n  Ufgently =3,\r\n  Later =4\r\n}\r\nexport type TaskType = {\r\n  description: string\r\n  title: string\r\n  completed: boolean\r\n  status: TaskStatuses\r\n  priority: TaskPriorities\r\n  startDate: string\r\n  deadline: string\r\n  id: string\r\n  todoListId: string\r\n  order: number\r\n  addedDate: string\r\n  entityStatus?: string\r\n}\r\ntype TasksResponseType = {\r\n  error: string | null\r\n  totalCount: number\r\n  items: TaskType[]\r\n}\r\nexport type UpdateTaskModelType = {\r\n  title: string\r\n  description: string\r\n  completed: boolean\r\n  status: number\r\n  priority: number\r\n  startDate: string\r\n  deadline: string\r\n}\r\n\r\nconst instance = axios.create({\r\n  baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n  withCredentials: true,\r\n  headers: {\r\n    'API-KEY': '0953c110-2e83-40a7-8c09-25e99de87d0b'\r\n  }\r\n})\r\n\r\nexport type LoginParamsType = {\r\n  email: string\r\n  password: string\r\n  rememberMe: boolean\r\n  captcha?: string\r\n\r\n}\r\n\r\nexport const authAPI = {\r\n  login(data: LoginParamsType) {\r\n    return instance.post<ResponseType<{userId?: number}>>('auth/login', data)\r\n  },\r\n  logout() {\r\n    return instance.delete<ResponseType<{userId?: number}>>('auth/login')\r\n  },\r\n  me() {\r\n    return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\r\n  }\r\n}\r\n\r\nexport const todolistAPI = {\r\n  getTodolists() {\r\n    const promise = instance.get<Array<TodolistType>>('todo-lists')\r\n    return promise\r\n  },\r\n  updateTodolist(todolistId: string, title: string) {\r\n      const promise = instance.put<ResponseType<{item: TodolistType}>>(`todo-lists/${todolistId}`, {title: title})\r\n      return promise\r\n  },\r\n  createTodolists(title: string) {\r\n    const promise = instance.post<ResponseType<{item: TodolistType}>>('todo-lists', { title: title })\r\n    return promise\r\n  },\r\n  deleteTodolist(todolistId: string) {\r\n    const promise = instance.delete<ResponseType>(`todo-lists/${todolistId}`)\r\n    return promise\r\n  },\r\n  getTasks(todolistId: string) {\r\n    const promise = instance.get<TasksResponseType>(`todo-lists/${todolistId}/tasks`)\r\n    return promise\r\n  },\r\n  createTask(todolistId: string, title: string) {\r\n    return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: title})\r\n  },\r\n  deleteTask(todolistId: string, taskId: string) {\r\n    return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`)\r\n  },\r\n  updateTask(todolistId: string, taskId: string, model:UpdateTaskModelType) {\r\n    return instance.put<ResponseType<{item: UpdateTaskModelType}>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\r\n  }\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { SetAppErrorActionType, SetAppStatusActionType } from './../../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\"\r\n\r\nexport const handleServerNetworkError = (message: string, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppErrorAC(message ? message : 'Some error occurred'))\r\n  dispatch(setAppStatusAC('failed'))\r\n}\r\n","import { Dispatch } from \"redux\"\r\nimport { authAPI } from \"../api/todolist-api\"\r\nimport { setIsLoggedInAC } from \"../components/Login/auth-reducer\"\r\nimport { handleServerNetworkError } from \"../utils/errorUtils/handleServerNetworkError\"\r\n\r\nexport type AppInitialStateType = {\r\n  status: RequestStatusType\r\n  error: string | null\r\n  //true if user is checked\r\n  initialized: boolean\r\n}\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\ntype ActionsType = SetAppErrorActionType | SetAppStatusActionType | ReturnType<typeof setAppInitAC>\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\nconst initialState: AppInitialStateType = {\r\n  status: 'idle',\r\n  error: null,\r\n  initialized: false\r\n}\r\n// actions\r\nexport const setAppStatusAC = (status: RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const)\r\nexport const setAppErrorAC = (error: string | null) => ({ type: 'APP/SET-ERROR', error } as const)\r\nexport const setAppInitAC = (value: boolean) => ({ type: 'APP/SET-IS-INITIALIZED', value } as const)\r\n\r\n// thunks\r\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\r\n  authAPI.me().then(res => {\r\n    if(res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true))\r\n    } else {\r\n\r\n    }\r\n    dispatch(setAppInitAC(true))\r\n  })\r\n  .catch(\r\n    (error) => {\r\n      handleServerNetworkError(error.message, dispatch)\r\n    }\r\n  )\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = initialState, action: ActionsType): AppInitialStateType => {\r\n  switch (action.type) {\r\n    case 'APP/SET-IS-INITIALIZED':\r\n      return {...state, initialized: action.value}\r\n    case 'APP/SET-STATUS':\r\n      return { ...state, status: action.status }\r\n    case 'APP/SET-ERROR':\r\n      return { ...state, error: action.error }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n","import { SetAppErrorActionType,SetAppStatusActionType } from './../../app/app-reducer';\r\nimport { Dispatch } from 'redux';\r\nimport { ResponseType } from \"../../api/todolist-api\"\r\nimport { setAppErrorAC, setAppStatusAC } from \"../../app/app-reducer\"\r\n\r\nexport const handleServerAppError = <D>( data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType >) => {\r\n  if (data.messages.length) {\r\n          dispatch(setAppErrorAC(data.messages[0]))\r\n        } else {\r\n          dispatch(setAppErrorAC('some error occurred'))\r\n        }\r\n        dispatch(setAppStatusAC('failed')) \r\n}\r\n ","import { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType, RequestStatusType } from './../../app/app-reducer';\r\nimport { AppRootState } from '../../app/store';\r\nimport { UpdateTaskModelType } from '../../api/todolist-api';\r\nimport { AddTodolistActionType, ClearTodoDataType, RemoveTodolistActionType, SetTodolistsActionType, todolistID1, todolistID2 } from './todolists-reducer';\r\nimport {v1} from 'uuid';\r\nimport { TaskPriorities, TaskStatuses, TaskType, todolistAPI } from '../../api/todolist-api';\r\nimport { Dispatch } from 'redux';\r\nimport { handleServerAppError } from '../../utils/errorUtils/handleServerAppError';\r\nimport { handleServerNetworkError } from '../../utils/errorUtils/handleServerNetworkError';\r\n\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\n\r\n// type ActionType = {\r\n//   type: string,\r\n//   [key: string]: any\r\n// }\r\n// types\r\nexport type SetTaskType = ReturnType<typeof setTasksAC> \r\ntype ActionsType = ReturnType<typeof removeTaskAC>\r\n  | ReturnType<typeof addTaskAC>\r\n  | ReturnType<typeof changeTaskTitleAC>\r\n  | ReturnType<typeof updateTaskAC>\r\n  | SetTaskType\r\n  | ReturnType<typeof changeTaskEntityStatus>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\n  | ClearTodoDataType\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  completed?: boolean\r\n  status?: number\r\n  priority?: number\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\n//export type FetchTasksType = ReturnType<typeof fetchTasksTC>\r\n// actions\r\nexport const removeTaskAC = (taskId: string, id: string) => ({ type: 'REMOVE-TASK',taskId, id} as const)\r\nexport const addTaskAC = ( task: TaskType) => ({ type: 'ADD-TASK', task} as const)\r\nexport const changeTaskTitleAC = (taskId: string, title: string, id: string) => ({ type: 'CHANGE-TASK-TITLE', title, taskId, id } as const)\r\nexport const updateTaskAC = ( taskId: string, model: UpdateDomainTaskModelType, id: string) => ({ type: 'UPDATE-TASK', id, taskId, model } as const)\r\nexport const setTasksAC = (id: string, tasks: Array<TaskType>) => ({type: 'SET-TASKS', id, tasks} as const)\r\nexport const changeTaskEntityStatus = (entityStatus: RequestStatusType, taskId: string, id: string) =>\r\n({ type: 'CHANGE-TASK-ENTITY-STATUS', entityStatus, taskId, id } as const)\r\n\r\n// thunks\r\nexport const fetchTasksTC = (id: string) => (dispatch: Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType >) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.getTasks(id)\r\n      .then(res => {\r\n        //console.log('IDTODOLIST', todolistId)\r\n        dispatch(setTasksAC(id, res.data.items))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      })\r\n      .catch(\r\n        (error) => {\r\n          handleServerNetworkError(error.message, dispatch)\r\n        }\r\n      )\r\n  }\r\nexport const removeTaskTC = (id: string, taskId: string) => (dispatch: Dispatch<ActionsType>) => {\r\n  dispatch(changeTaskEntityStatus('loading', taskId, id))\r\n    todolistAPI.deleteTask(id, taskId)\r\n      .then(res => {\r\n        const action = removeTaskAC(taskId, id)\r\n        dispatch(action)\r\n      })\r\n  }\r\nexport const addTaskTC = (id: string, title: string) => (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistAPI.createTask(id, title)\r\n    .then(res => {\r\n      if (res.data.resultCode === 0) {\r\n        let task = res.data.data.item\r\n        dispatch(addTaskAC(task))\r\n        dispatch(setAppStatusAC('succeeded'))\r\n      } else {\r\n        handleServerAppError(res.data, dispatch)\r\n      }\r\n    })\r\n    .catch((error) => {\r\n      handleServerNetworkError(error.message, dispatch)\r\n    })\r\n}\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, id: string) =>\r\n  (dispatch: Dispatch<ActionsType | SetAppErrorActionType | SetAppStatusActionType>, getState: () => AppRootState) => {\r\n    const state = getState()\r\n    let task = state.tasks[id].find(t => t.id === taskId)\r\n    if (!task) {\r\n      //throw new Error('task is not found')\r\n      console.warn('task is not found in the state!')\r\n      return\r\n    }\r\n    const apiModel: UpdateTaskModelType = {\r\n      completed: task.completed,\r\n      description: task.description,\r\n      status: task.status,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      deadline: task.deadline,\r\n      title: task.title,\r\n      ...domainModel\r\n    }\r\n    dispatch(changeTaskEntityStatus('loading', taskId, id))\r\n    todolistAPI.updateTask(id, taskId, apiModel).then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          dispatch(updateTaskAC(taskId, domainModel, id))\r\n          dispatch(changeTaskEntityStatus('succeeded', taskId, id))\r\n        } else {\r\n          handleServerAppError(res.data, dispatch)\r\n          dispatch(setAppStatusAC('failed'))\r\n        }\r\n      }\r\n    )\r\n    .catch((error) => {\r\n      handleServerNetworkError(error.message, dispatch)\r\n    })\r\n  }\r\n\r\nconst initialState:TasksStateType = {\r\n  // [todolistID1]: [{ id: v1(), title: 'CSS', status: TaskStatuses.Completed,todoListId: todolistID2, completed: false, description:'', priority: TaskPriorities.Middle, startDate: '', deadline:'', order: 1, addedDate:'', entityStatus: 'idle' },\r\n  // { id: v1(), title: 'JS', status: TaskStatuses.Completed,todoListId: todolistID2, completed: false, description:'', priority: TaskPriorities.Middle, startDate: '', deadline:'', order: 1, addedDate:'', entityStatus: 'idle' },\r\n  // { id: v1(), title: 'React', status: TaskStatuses.Completed,todoListId: todolistID2, completed: false, description:'', priority: TaskPriorities.Middle, startDate: '', deadline:'', order: 1, addedDate:'', entityStatus: 'idle' },\r\n  // { id: v1(), title: 'Vui', status: TaskStatuses.Completed,todoListId: todolistID2, completed: false, description:'', priority: TaskPriorities.Middle, startDate: '', deadline:'', order: 1, addedDate:'', entityStatus: 'idle' }],\r\n  // [todolistID2]: [\r\n  //   { id: v1(), title: 'Milk', status: TaskStatuses.Completed,todoListId: todolistID2, completed: false, description:'', priority: TaskPriorities.Middle, startDate: '', deadline:'', order: 1, addedDate:'', entityStatus: 'idle' },\r\n  // { id: v1(), title: 'Bread', status: TaskStatuses.Completed,todoListId: todolistID2, completed: false, description:'', priority: TaskPriorities.Middle, startDate: '', deadline:'', order: 1, addedDate:'' , entityStatus: 'idle'},\r\n  // ]\r\n}\r\n\r\nexport const tasksReducer = (state: TasksStateType=initialState, action: ActionsType): TasksStateType => {\r\n  switch(action.type) {\r\n    case 'SET-TODOLISTS': {\r\n      let stateCopy = {...state}\r\n      action.todolists.forEach(tl => {\r\n        stateCopy[tl.id] = []\r\n      })\r\n      return stateCopy\r\n    }\r\n    case 'SET-TASKS':\r\n      return {...state, [action.id]: action.tasks}\r\n      // let stateCopy = {...state}\r\n      // stateCopy[action.id] = action.tasks\r\n      // return stateCopy\r\n    case 'REMOVE-TASK': \r\n      return { ...state, [action.id]: state[action.id].filter( t => t.id !== action.taskId)}\r\n    //  let stateCopy = {...state}\r\n    //  const tasks = state[action.id]\r\n    //  const newTasks = tasks.filter( t => t.id !== action.taskId)\r\n    //  stateCopy[action.id] = newTasks\r\n    //  return stateCopy\r\n    case 'ADD-TASK' : \r\n      return {...state, [action.task.todoListId]: [action.task, ...state[action.task.todoListId]]}\r\n      // let stateCopy = {...state}\r\n      // let newTask = action.task\r\n      // let tasks = stateCopy[action.task.todoListId]\r\n      // let newTasks = [newTask, ...tasks]\r\n      // stateCopy[action.task.todoListId] = newTasks\r\n      // return stateCopy\r\n    case 'CHANGE-TASK-TITLE': \r\n      return {...state, [action.id]: state[action.id].map(t => t.id === action.taskId ? {...t, title: action.title} : t)}\r\n      // let todolistTasks = state[action.id]\r\n      // state[action.id] = todolistTasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t )\r\n      // return {...state}\r\n\r\n      // let stateCopy = {...state}\r\n      // let tasks = stateCopy[action.todolistId]\r\n      // stateCopy[action.todolistId] = tasks.map(t => t.id === action.taskId ? {...t, title: action.title} : t)\r\n      // return stateCopy\r\n    case 'CHANGE-TASK-ENTITY-STATUS':\r\n      return {...state, [action.id]: state[action.id].map(t => t.id === action.taskId ? {...t, entityStatus: action.entityStatus} : t)}\r\n    case 'UPDATE-TASK': \r\n      return {...state, [action.id]: state[action.id].map(t => t.id === action.taskId ? {...t, ...action.model} : t)}\r\n      // const stateCopy = {...state}\r\n      // let tasks = stateCopy[action.id]\r\n      // stateCopy[action.id] = tasks.map(t => t.id === action.taskId ? {...t, ...action.model} : t)\r\n      // return stateCopy\r\n    case 'ADD-TODOLIST': \r\n      return {...state, [action.todolist.id]: []}\r\n      // let stateCopy = {...state}\r\n      // stateCopy[action.todolist.id] = []\r\n      // return stateCopy\r\n    case 'REMOVE-TODOLIST': {\r\n      let stateCopy = {...state}\r\n      delete stateCopy[action.id] \r\n      return stateCopy\r\n    }\r\n    case 'CLEAR-TODOLISTS':\r\n      return {}\r\n    default: \r\n    return state\r\n    //throw new Error('Failed action type!')\r\n  }\r\n}","import { Dispatch } from 'redux';\r\nimport {v1} from 'uuid';\r\nimport { todolistAPI, TodolistType } from \"../../api/todolist-api\";\r\nimport { RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer';\r\nimport { handleServerNetworkError } from '../../utils/errorUtils/handleServerNetworkError';\r\nimport { fetchTasksTC, SetTaskType } from './tasks-reducer';\r\n\r\nexport type FilterValuesType = 'all' | 'completed' | 'active'\r\nexport type TodolistDomainType = TodolistType & {filter: FilterValuesType} & {entityStatus: RequestStatusType }\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>\r\nexport type ClearTodoDataType = ReturnType<typeof clearTodolistsAC>\r\ntype ActionsType = RemoveTodolistActionType | AddTodolistActionType \r\n                   | SetTodolistsActionType\r\n                   | ReturnType<typeof changeTodolistTitleAC>\r\n                   | ReturnType<typeof changeTodolistFilterAC>\r\n                   | ReturnType<typeof changeTodolistEntityStatus>\r\n                   | SetTaskType\r\n                   | ClearTodoDataType\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>                  \r\n// action\r\nexport const removeTodolistAC = (id: string) =>\r\n  ({ type: 'REMOVE-TODOLIST', id } as const)\r\nexport const addTodolistAC = (todolist: TodolistType) =>\r\n  ({ type: 'ADD-TODOLIST', todolist } as const)\r\nexport const changeTodolistTitleAC = (title: string, id: string) =>\r\n  ({ type: 'CHANGE-TODOLIST-TITLE', title, id } as const)\r\nexport const changeTodolistFilterAC = (filter: FilterValuesType, id: string) =>\r\n  ({ type: 'CHANGE-TODOLIST-FILTER', filter, id } as const)\r\nexport const setTodolistsAC = (todolists: Array<TodolistType>) =>\r\n  ({ type: 'SET-TODOLISTS', todolists } as const)\r\nexport const changeTodolistEntityStatus = (status: RequestStatusType, id: string) =>\r\n({ type: 'CHANGE-TODOLIST-ENTITY-STATUS', status, id } as const)\r\nexport const clearTodolistsAC = () =>\r\n({ type: 'CLEAR-TODOLISTS'} as const)\r\n  \r\n\r\n// thunks\r\nexport const fetchTodolistsTC = () => (dispatch: any) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  todolistAPI.getTodolists()\r\n    .then((res) => {\r\n      dispatch(setTodolistsAC(res.data))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      return res.data\r\n    })\r\n    .then(todos => {\r\n      todos.forEach((todo) => {\r\n        dispatch(fetchTasksTC(todo.id))\r\n      })\r\n    })\r\n    .catch(error => {\r\n      handleServerNetworkError(error.message, dispatch)\r\n    })\r\n}\r\nexport const removeTodolistTC = (id: string) => (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  dispatch(changeTodolistEntityStatus('loading', id))\r\n  todolistAPI.deleteTodolist(id).then((res) => {\r\n    dispatch(removeTodolistAC(id))\r\n    dispatch(setAppStatusAC('succeeded'))\r\n  })\r\n  .catch(error => {\r\n    handleServerNetworkError(error.message, dispatch)\r\n  })\r\n}\r\nexport const addTodolistTC = (title: string) => (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n    todolistAPI.createTodolists(title).then((res) => {\r\n      dispatch(addTodolistAC(res.data.data.item))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    })\r\n    .catch(error => {\r\n      handleServerNetworkError(error.message, dispatch)\r\n    })\r\n  }\r\nexport const changeTodolistTitleTC = (title: string, id: string) => (dispatch: ThunkDispatch) => {\r\n    todolistAPI.updateTodolist(id, title).then(\r\n      res => {\r\n        dispatch(changeTodolistTitleAC(title, id))\r\n      }\r\n    )\r\n    .catch(error => {\r\n      handleServerNetworkError(error.message, dispatch)\r\n    })\r\n  }\r\n\r\nexport let todolistID1 = v1()\r\nexport let todolistID2 = v1()\r\n\r\nconst initialState:Array<TodolistDomainType> = [\r\n  // { todolistId: todolistID1, title: 'What to learn', filter: 'all', order:0, addedDate:'' },\r\n  // { todolistId: todolistID2, title: 'What to buy', filter: 'all', order:0, addedDate:'' },\r\n]\r\n\r\nexport const todolistsReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\r\n  switch(action.type) {\r\n    case 'SET-TODOLISTS':\r\n      return action.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle' }))\r\n    case 'REMOVE-TODOLIST': \r\n      return state.filter(tl => tl.id !== action.id)\r\n    case 'ADD-TODOLIST' : \r\n      return [ {...action.todolist, filter: 'all', entityStatus: 'idle'}, ...state ]\r\n    case 'CHANGE-TODOLIST-TITLE': \r\n      return state.map(tl => tl.id === action.id ? {...tl, title: action.title} : tl)\r\n    case 'CHANGE-TODOLIST-FILTER': \r\n      return state.map(tl => tl.id === action.id ? {...tl, filter: action.filter} : tl)\r\n    case 'CHANGE-TODOLIST-ENTITY-STATUS':\r\n      return state.map(tl => tl.id === action.id ? {...tl, entityStatus: action.status} : tl)\r\n    case 'CLEAR-TODOLISTS':\r\n      return []\r\n    default: \r\n    return state\r\n    // throw new Error('Failed action type!')\r\n  }\r\n}","import { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer';\r\nimport { Dispatch } from \"redux\"\r\nimport { authAPI, LoginParamsType } from '../../api/todolist-api';\r\nimport { handleServerAppError } from '../../utils/errorUtils/handleServerAppError';\r\nimport { handleServerNetworkError } from '../../utils/errorUtils/handleServerNetworkError';\r\nimport { ClearTodoDataType, clearTodolistsAC } from '../Todolists/todolists-reducer';\r\n\r\ntype LoginStateType = {\r\n  isLoggedIn: boolean\r\n}\r\ntype ActionType =  ReturnType<typeof setIsLoggedInAC>\r\ntype ThunkDispatch = Dispatch<ActionType | SetAppErrorActionType | SetAppStatusActionType | ClearTodoDataType>\r\nconst initialState: LoginStateType = {\r\n  isLoggedIn: false\r\n}\r\n\r\n//actions\r\nexport const setIsLoggedInAC = (value: boolean) => ({type: 'login/SET-IS-LOGGED-IN', value} as const)\r\n\r\n// thunks\r\nexport const loginTC = (data: LoginParamsType) => (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.login(data).then(res => {\r\n    if(res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(true))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n    }\r\n  })\r\n  .catch((error) => {\r\n    handleServerNetworkError(error, dispatch)\r\n  })\r\n}\r\n\r\nexport const logoutTC = () => (dispatch: ThunkDispatch) => {\r\n  dispatch(setAppStatusAC('loading'))\r\n  authAPI.logout().then(res => {\r\n    if(res.data.resultCode === 0) {\r\n      dispatch(setIsLoggedInAC(false))\r\n      dispatch(setAppStatusAC('succeeded'))\r\n      dispatch(clearTodolistsAC())\r\n    } else {\r\n      handleServerAppError(res.data, dispatch)\r\n    }\r\n  })\r\n  .catch((error) => {\r\n    handleServerNetworkError(error, dispatch)\r\n  })\r\n}\r\n\r\nexport const authReducer = (state: LoginStateType = initialState, action: ActionType): LoginStateType => {\r\n  switch (action.type) {\r\n    case 'login/SET-IS-LOGGED-IN':\r\n      return {...state, isLoggedIn: action.value}\r\n    default:\r\n      return state\r\n  }\r\n}","import { authReducer } from './../components/Login/auth-reducer';\r\nimport { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport { tasksReducer } from \"../components/Todolists/tasks-reducer\";\r\nimport { todolistsReducer } from \"../components/Todolists/todolists-reducer\";\r\nimport { appReducer } from \"./app-reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n  todolists: todolistsReducer,\r\n  tasks: tasksReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\n// type AppRootState = {\r\n//   todolists: Array<TodolistType>\r\n//   tasks: TasksStateType\r\n// }\r\n\r\nexport type AppRootState = ReturnType<typeof rootReducer>\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk))\r\n\r\n// @ts-ignore\r\nwindow.store = store","import { AddBox } from '@mui/icons-material';\r\nimport { IconButton, TextField } from '@mui/material';\r\nimport React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\n\r\ntype AddItemPropsType = {\r\n  addItem: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(( {addItem, disabled = false}: AddItemPropsType) => {\r\nconsole.log('ADDItemForm is called!')\r\n  let [title, setTitle] = useState('')\r\n  const [error, setError] = useState<string | null>(null)\r\n\r\n  const onChangeHanle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n  }\r\n  const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (error !== null){\r\n       setError(null)\r\n    }\r\n   \r\n    if (e.charCode === 13) {\r\n      addItem(title)\r\n      setTitle('')\r\n    }\r\n  }\r\n  const addTask = () => {\r\n    if (title.trim() === '') {\r\n      setError('Title is required!')\r\n      return;\r\n    }\r\n    addItem(title)\r\n    setTitle('')\r\n  }\r\n  return (\r\n    <div>\r\n      <TextField variant='outlined' label={'Type value'} value={title} onChange={onChangeHanle} \r\n                 helperText={error} error={!!error} onKeyPress={onKeyPressHandler} disabled={disabled} />\r\n                 <IconButton color='primary' disabled={disabled} >\r\n                 <AddBox onClick={addTask}/> !!!\r\n                 </IconButton>\r\n      \r\n    </div>\r\n  )\r\n}\r\n)\r\n\r\n","import { TextField } from '@mui/material';\r\nimport React, { ChangeEvent, useState } from 'react';\r\n\r\ntype EditableSpanPropsType = {\r\n  title: string,\r\n  onChange: (title: string) => void\r\n  disabled?: boolean\r\n}\r\n\r\nexport const Editablespan = React.memo((props: EditableSpanPropsType) => {\r\n\r\n   const [editMode, setEditMode] = useState(false)\r\n   const [title, setTitle] = useState('')\r\n\r\n   const activeteEditMode = () => {\r\n     setEditMode(true)\r\n     setTitle(props.title)\r\n   }\r\n   const deactivateEditMode = () => {\r\n     setEditMode(false)\r\n    props.onChange(title)\r\n   }\r\n   const onChangeHandle = (e: ChangeEvent<HTMLInputElement>) => {\r\n    setTitle(e.currentTarget.value)\r\n   }\r\n  return (\r\n    editMode ? <TextField disabled={props.disabled} onChange={onChangeHandle} value={title} onBlur={deactivateEditMode} autoFocus/>\r\n    : <span  onDoubleClick={activeteEditMode}>{props.title}</span>\r\n  )\r\n})","import React, { ChangeEvent} from 'react';\r\nimport { Editablespan } from '../../../common/Editablespan';\r\nimport { TaskType } from '../../../../api/todolist-api';\r\nimport { Checkbox, IconButton, ListItem } from '@mui/material';\r\nimport { Delete } from '@mui/icons-material';\r\n\r\n\r\ntype TaskPropsType = {\r\n  task: TaskType\r\n  todolistID: string\r\n  removeTask: (id: string) => void\r\n  changeTaskStatus: (taskId: string, status: number) => void\r\n  changeTaskTitle: (taskId: string, title: string) => void\r\n  disabled?: boolean\r\n  }\r\n  \r\n  export const Task = React.memo((props: TaskPropsType) => {\r\n    console.log('TASK is called')\r\n\r\n    const changeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n      let status\r\n      e.currentTarget.checked ? status = 2 : status = 0\r\n      props.changeTaskStatus(props.task.id, status)\r\n    }\r\n\r\n    const changeTaskTitle = (title: string) => {\r\n      props.changeTaskTitle(props.task.id, title)\r\n    }\r\n\r\n    return <ListItem className={props.task.status === 2 ? 'is-done' : ''} key={props.task.id}>\r\n      <Checkbox disabled={props.disabled || props.task.entityStatus === 'loading'} onChange={changeTaskStatus} checked={props.task.status === 2} />\r\n      <Editablespan disabled={props.disabled || props.task.entityStatus === 'loading'} onChange={changeTaskTitle} title={props.task.title} />\r\n      <IconButton disabled={props.disabled || props.task.entityStatus === 'loading'} onClick={() => props.removeTask(props.task.id)}>\r\n        <Delete />\r\n      </IconButton>\r\n    </ListItem >\r\n  })","import React, {useCallback, useEffect } from 'react';\r\nimport { AddItemForm } from '../../common/AddItemForm';\r\nimport {Task} from './Tasks/Task'\r\nimport { Editablespan } from '../../common/Editablespan';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../../app/store';\r\nimport { fetchTasksTC, removeTaskTC, addTaskTC, updateTaskTC } from '../tasks-reducer';\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer';\r\nimport { TaskType } from '../../../api/todolist-api';\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { Button, List } from '@mui/material';\r\n\r\ntype PropsType = {\r\n  todolist: TodolistDomainType\r\n  changeFilter: (value: FilterValuesType, todolistID: string) => void\r\n  removeTodolist: (todolistID: string) => void\r\n  changeTodolistTitle: (title: string, todolistID: string) => void\r\n  demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(({demo=false, ...props}: PropsType) => {\r\n  console.log('TODOLIST is called!', props.todolist.id)\r\n  const dispatch = useDispatch()\r\n  const tasks = useSelector<AppRootState, Array<TaskType>>((state) => state.tasks[props.todolist.id])\r\n\r\n  // useEffect(() => {\r\n  //   if(demo) {\r\n  //     return\r\n  //   }\r\n  //   dispatch(fetchTasksTC(props.todolist.id))\r\n  // }, [])\r\n\r\n  const removeTask = useCallback((id: string) => {\r\n   dispatch(removeTaskTC(props.todolist.id, id))\r\n  }, [dispatch, props.todolist.id])\r\n\r\n  const onChangeHandler = useCallback((taskId, status ) => {\r\n    dispatch(updateTaskTC(taskId, {status}, props.todolist.id))\r\n  }, [dispatch, props.todolist.id])\r\n\r\n  const onChangeTitle = useCallback((taskId, title) => {\r\n    dispatch(updateTaskTC(taskId, {title}, props.todolist.id))\r\n  },[dispatch, props.todolist.id])\r\n\r\n  const addTask = useCallback((title: string) => {\r\n    const action = addTaskTC(props.todolist.id, title)\r\n    dispatch(action)\r\n  }, [dispatch,  props.todolist.id])\r\n\r\n  const onAllClickHandle = useCallback(() => {\r\n    props.changeFilter('all', props.todolist.id)\r\n  }, [props.changeFilter, props.todolist.id])\r\n  const onActiveClickHandle = useCallback(() => {\r\n    props.changeFilter('active', props.todolist.id)\r\n  }, [props.changeFilter, props.todolist.id])\r\n  const onCompletedClickHandle = useCallback(() => {\r\n    props.changeFilter('completed', props.todolist.id)\r\n  }, [props.changeFilter, props.todolist.id])\r\n  // const removeTodolist = () => {\r\n  //   props.removeTodolist(props.todolistID)\r\n  // }\r\n  const changeTodolistTitle = useCallback((title: string) => {\r\n    props.changeTodolistTitle(title, props.todolist.id)\r\n  }, [props.changeTodolistTitle, props.todolist.id])\r\n\r\n  let tasksForTodolist = tasks\r\n  if (props.todolist.filter === 'completed') {\r\n    tasksForTodolist = tasks.filter(t => t.status === 2)\r\n  } else if (props.todolist.filter === 'active') {\r\n    tasksForTodolist = tasks.filter(t => t.status === 0)\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h3>\r\n        <Editablespan title={props.todolist.title} onChange={changeTodolistTitle} disabled={props.todolist.entityStatus === 'loading'} />\r\n        <IconButton onClick={() => props.removeTodolist(props.todolist.id)} disabled={props.todolist.entityStatus === 'loading'} >\r\n          <Delete />\r\n        </IconButton></h3>\r\n      <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'} />\r\n      <List>\r\n        {\r\n          tasksForTodolist.map((t) => <Task disabled={props.todolist.entityStatus === 'loading'} task={t} todolistID={props.todolist.id}\r\n            changeTaskTitle={onChangeTitle}\r\n            key={t.id}\r\n            removeTask={removeTask} changeTaskStatus={onChangeHandler} />)\r\n        }\r\n      </List>\r\n      <div>\r\n        <Button variant={props.todolist.filter === 'all' ? 'contained' : 'text'} onClick={onAllClickHandle}>All</Button>\r\n        <Button color='primary' variant={props.todolist.filter === 'active' ? 'contained' : 'text'} onClick={onActiveClickHandle}>Active</Button>\r\n        <Button color='secondary' variant={props.todolist.filter === 'completed' ? 'contained' : 'text'} onClick={onCompletedClickHandle}>Completed</Button>\r\n      </div>\r\n    </div>\r\n  )\r\n})\r\n\r\n","import React, { useCallback, useEffect } from 'react';\r\nimport { addTodolistTC, changeTodolistFilterAC, changeTodolistTitleTC, fetchTodolistsTC, FilterValuesType, removeTodolistTC, TodolistDomainType } from './todolists-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../app/store';\r\nimport { Todolist } from './Todolist/Todolist';\r\nimport { AddItemForm } from '../common/AddItemForm';\r\nimport { Grid, Paper } from '@mui/material';\r\nimport { Navigate } from 'react-router';\r\n\r\ntype TodoListsDomainType = {\r\n  demo?: boolean\r\n}\r\n\r\nexport const TodoLists = ({ demo, ...props }: TodoListsDomainType) => {\r\n  const dispatch = useDispatch()\r\n  const todolists = useSelector<AppRootState, Array<TodolistDomainType>>((state) => state.todolists)\r\n  //const [filter, setFilter] = useState<FilterValuesType>('all')\r\n  const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n \r\n  useEffect(() => {\r\n    if (demo || !isLoggedIn) {\r\n      return\r\n    }\r\n    dispatch(fetchTodolistsTC())\r\n  }, [])\r\n\r\n  const removeTodolist = useCallback((todolistID: string) => {\r\n    const action = removeTodolistTC(todolistID)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeTodolistTitle = useCallback((newTitle: string, todolistID: string) => {\r\n    dispatch(changeTodolistTitleTC(newTitle, todolistID))\r\n  }, [dispatch])\r\n\r\n  const addTodolist = useCallback((title: string) => {\r\n    const action = addTodolistTC(title)\r\n    dispatch(action)\r\n  }, [dispatch])\r\n\r\n  const changeFilter = useCallback((value: FilterValuesType, todolistID: string) => {\r\n    const action = changeTodolistFilterAC(value, todolistID)\r\n    dispatch(action)\r\n    console.log('action', action)\r\n  }, [dispatch])\r\n\r\n  if(!isLoggedIn) {\r\n    return <Navigate to={'/login'} />\r\n  }\r\n  \r\n  return <>\r\n    <Grid style={{ padding: '20px' }} container>\r\n      <AddItemForm addItem={addTodolist} />\r\n    </Grid>\r\n    <Grid container spacing={3} >\r\n      {todolists.map(tl => {\r\n        return <Grid item>\r\n          <Paper style={{ padding: '10px' }}>\r\n            <Todolist\r\n              demo={demo}\r\n              key={tl.id}\r\n              todolist={tl}\r\n              removeTodolist={removeTodolist}\r\n              changeTodolistTitle={changeTodolistTitle}\r\n              changeFilter={changeFilter} />\r\n          </Paper>\r\n        </Grid>\r\n      })}\r\n    </Grid>\r\n  </>\r\n}\r\n","import * as React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../app/store';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n  props,\r\n  ref,\r\n) {\r\n  return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\nexport default function ErrorSnackBar() {\r\n  // const [open, setOpen] = React.useState(true);\r\n  const error = useSelector<AppRootState, string | null>(state => state.app.error)\r\n  const dispatch = useDispatch()\r\n\r\n  const isOpen = error !== null\r\n\r\n  const handleClose = (event?: React.SyntheticEvent | Event, reason?: string) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    dispatch(setAppErrorAC(null))\r\n    //setOpen(false);\r\n  }\r\n  return (\r\n    <Snackbar anchorOrigin={ {vertical:'bottom', horizontal:'right'} } open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n      <Alert onClose={handleClose} severity=\"error\" sx={{ width: '100%' }}>\r\n        {error}\r\n      </Alert>\r\n    </Snackbar>\r\n  );\r\n}","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport { useFormik } from 'formik';\r\nimport { loginTC } from './auth-reducer';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { AppRootState } from '../../app/store';\r\nimport { Navigate  } from 'react-router-dom';\r\n\r\nexport const Login = () => {\r\n  const dispatch = useDispatch()\r\n  const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\r\n\r\n  const formik = useFormik({\r\n    validate: (values) => {\r\n      if(!values.email) {\r\n        return {\r\n          email: 'Email is required!'\r\n        }\r\n      }\r\n      if(!values.password) {\r\n        return {password: 'Password is required!'}\r\n      }\r\n    },\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n      rememberMe: false\r\n    },\r\n    onSubmit: values => {\r\n     dispatch(loginTC(values))\r\n    },\r\n  })\r\n\r\n  if (isLoggedIn) {\r\n    return <Navigate  to={'/'} />\r\n  }\r\n\r\n   return <Grid container justifyContent={'center'}>\r\n       <Grid item justifyContent={'center'}>\r\n         <form onSubmit = {formik.handleSubmit} >\r\n           <FormControl>\r\n               <FormLabel>\r\n                   <p>To log in get registered\r\n                       <a href={'https://social-network.samuraijs.com/'}\r\n                          target={'_blank'}> here\r\n                       </a>\r\n                       </p>\r\n                   <p>or use common test account credentials:</p>\r\n                   <p>Email: free@samuraijs.com</p>\r\n                   <p>Password: free</p>\r\n               </FormLabel>\r\n               <FormGroup>\r\n                   <TextField \r\n                      label=\"Email\" \r\n                      margin=\"normal\"\r\n                      {...formik.getFieldProps('email')}\r\n                      />\r\n                      {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                   <TextField type=\"password\" label=\"Password\"\r\n                              margin=\"normal\"\r\n                              {...formik.getFieldProps('password')}\r\n                   />\r\n                   {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                   <FormControlLabel label={'Remember me'} control={<Checkbox \r\n                      {...formik.getFieldProps('rememberMe')} checked={formik.values.rememberMe}\r\n                    />}/>\r\n                   <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                       Login\r\n                   </Button>\r\n               </FormGroup>\r\n           </FormControl>\r\n         </form>\r\n       </Grid>\r\n   </Grid>\r\n}\r\n","import React, { useCallback, useEffect } from 'react';\nimport './App.css';\nimport AppBar from '@mui/material/AppBar';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Button from '@mui/material/Button';\nimport Container from '@mui/material/Container';\nimport { TodoLists } from '../components/Todolists/TodoLists';\nimport LinearProgress from '@mui/material/LinearProgress';\nimport { Menu } from '@mui/icons-material';\nimport ErrorSnackBar from '../components/common/ErrorSnackBar';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppRootState } from './store';\nimport { initializeAppTC, RequestStatusType } from './app-reducer';\nimport { BrowserRouter, Route, Routes } from 'react-router-dom';\nimport { Login } from '../components/Login/Login';\nimport { CircularProgress } from '@mui/material';\nimport { logoutTC } from '../components/Login/auth-reducer';\n// export type TasksStateType = {\n//   [key: string]: Array<TaskType>\n// }\n\ntype PropsType = {\n  demo?: boolean\n}\n\nfunction AppWithRedux({ demo = false, ...props }: PropsType) {\n  const status = useSelector<AppRootState, RequestStatusType>(state => state.app.status)\n  const isInitialized = useSelector<AppRootState, boolean>(state => state.app.initialized)\n  const dispatch = useDispatch()\n  const isLoggedIn = useSelector<AppRootState, boolean>(state => state.auth.isLoggedIn)\n\n  useEffect(() => {\n    dispatch(initializeAppTC())\n  }, [])\n\n  const logoutHandler = useCallback(() => {\n    dispatch(logoutTC())\n  }, [])\n\n  if (!isInitialized) {\n    return <CircularProgress style={{ position: 'fixed', top: '30%', left: '50%', width: 80, height: 80 }} /> }\n\n  return (\n    <>\n      {/* <Helmet>\n      <script type=\"text/javascript\">\n        {`\n            window.onUsersnapCXLoad = function(api) {\n              api.init();\n              api.show('${USERSNAP_API_KEY}') \n            }\n            var script = document.createElement('script');\n            script.defer = 1;\n            script.src = 'https://widget.usersnap.com/global/load/${USERSNAP_GLOBAL_API_KEY}?onload=onUsersnapCXLoad';\n            document.getElementsByTagName('head')[0].appendChild(script);\n        `}\n      </script>\n    </Helmet> */}\n      <BrowserRouter>\n        <div className=\"App\">\n          <ErrorSnackBar />\n          <AppBar position=\"static\">\n            <Toolbar>\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                <Menu />\n              </IconButton>\n              <Typography variant=\"h6\" >\n                News\n              </Typography>\n              { isLoggedIn && <Button onClick={logoutHandler} color=\"inherit\">Log out</Button>}\n            </Toolbar>\n          </AppBar>\n          <div className=\"progressLine\">\n            {status === 'loading' && <LinearProgress color=\"secondary\" />}\n          </div>\n          <Container>\n            <Routes>\n              <Route path=\"/\" element={<TodoLists demo={demo} />} />\n              <Route path=\"/login\" element={<Login />} />\n            </Routes>\n          </Container>\n        </div>\n      </BrowserRouter>\n    </>\n  );\n}\nexport default AppWithRedux;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\nimport { store } from './app/store';\nimport AppWithRedux from './app/AppWithRedux';\n\nReactDOM.render(\n  <Provider store = {store}>\n     <AppWithRedux />\n  </Provider>,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}